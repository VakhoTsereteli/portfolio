{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"h1 mt-50\"\n}, \"COLOR PICKER\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  class: \"colorpicker justify-content-between\"\n};\nconst _hoisted_3 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_MainComponent = _resolveComponent(\"MainComponent\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_MainComponent), _hoisted_1, _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.colors, (color, index) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      type: \"color\",\n      key: index,\n      style: _normalizeStyle({\n        backgroundColor: color.value\n      }),\n      onClick: $event => $options.copyToClipboard(color.value)\n    }, null, 12 /* STYLE, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", {\n    class: \"container\",\n    style: _normalizeStyle({\n      backgroundColor: $data.containerColor\n    })\n  }, \" Container \", 4 /* STYLE */)]);\n}","map":{"version":3,"names":["_createElementVNode","class","_createElementBlock","_createVNode","_component_MainComponent","_hoisted_1","_hoisted_2","_Fragment","_renderList","$data","colors","color","index","type","key","style","_normalizeStyle","backgroundColor","value","onClick","$event","$options","copyToClipboard","containerColor"],"sources":["/home/vakho_tsereteli/portfolio/src/components/Main/Projects/ColorPicker/ColorPicker.vue"],"sourcesContent":["<!-- <template>\n    <div>\n      <MainComponent/>\n      <br>\n      <div class=\"main\">\n        <div class=\"colorpicker\">\n          <div class=\"colored\" :style=\"{backgroundColor: colored}\">\n            <input id=\"test\"/>\n          </div>\n          <button class=\"main_color\" type=\"color\" v-for=\"(color, index) in colors\" :key=\"index\" :style=\"{ backgroundColor: color.value }\"></button>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n    import \"./ColorPicker.css\";\n    import MainComponent from \"../../../Main/Main.vue\";\n  \n    export default {\n      name: \"ColorPicker\",\n      components: {\n        MainComponent,\n      },\n      data() {\n        return {\n          colors: [\n            { name: \"white\", value: \"#FFFFFF\" },\n            { name: \"black\", value: \"#000000\" },\n            { name: \"red\", value: \"#FF0000\" },\n            { name: \"blue\", value: \"#0000FF\" },\n            { name: \"yellow\", value: \"#FFFF00\" }\n          ],\n        }\n      },\n      methods: {\n      }\n    }\n  </script>\n\n<style >\n</style>\n   -->\n\n\n   <template>\n    <div>\n      <MainComponent />\n      <div class=\"h1 mt-50\">COLOR PICKER</div>\n      <div class=\"colorpicker justify-content-between\">\n        <button\n          type=\"color\"\n          v-for=\"(color, index) in colors\"\n          :key=\"index\"\n          :style=\"{ backgroundColor: color.value }\"\n          @click=\"copyToClipboard(color.value)\"\n        ></button>\n      </div>\n      <div class=\"container\" :style=\"{ backgroundColor: containerColor }\">\n        Container\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import \"./ColorPicker.css\";\n  import MainComponent from \"../../../Main/Main.vue\";\n  import Vue from \"vue\";\n  import Vuetify from \"vuetify\";\n  import \"vuetify/dist/vuetify.min.css\";\n  \n  Vue.use(Vuetify);\n  \n  export default {\n    name: \"ColorPicker\",\n    components: {\n      MainComponent,\n    },\n    data() {\n      return {\n        colors: [\n          { name: \"white\", value: \"#FFFFFF\" },\n          { name: \"black\", value: \"#000000\" },\n          { name: \"red\", value: \"#FF0000\" },\n          { name: \"blue\", value: \"#0000FF\" },\n          { name: \"yellow\", value: \"#FFFF00\" },\n        ],\n        color: \"#FFFFFF\",\n        containerColor: \"#FFFFFF\",\n      };\n    },\n    methods: {\n      copyToClipboard(value) {\n        this.color = value;\n        this.containerColor = value;\n        this.$copyText(value).then(() => {\n          // Text successfully copied to clipboard\n          console.log(\"Text copied to clipboard!\");\n        });\n      },\n    },\n  };\n  </script>\n  \n  <style>\n  /* Additional CSS styles if needed */\n  .container {\n    width: 200px;\n    height: 200px;\n    margin-top: 20px;\n    text-align: center;\n    line-height: 200px;\n    color: white;\n  }\n  </style>\n  "],"mappings":";gCAgDMA,mBAAA,CAAwC;EAAnCC,KAAK,EAAC;AAAU,GAAC,cAAY;;EAC7BA,KAAK,EAAC;AAAqC;;;;uBAHlDC,mBAAA,CAeM,cAdJC,YAAA,CAAiBC,wBAAA,GACjBC,UAAwC,EACxCL,mBAAA,CAQM,OARNM,UAQM,I,kBAPJJ,mBAAA,CAMUK,SAAA,QAAAC,WAAA,CAJiBC,KAAA,CAAAC,MAAM,GAAvBC,KAAK,EAAEC,KAAK;yBAFtBV,mBAAA,CAMU;MALRW,IAAI,EAAC,OAAO;MAEXC,GAAG,EAAEF,KAAK;MACVG,KAAK,EAAAC,eAAA;QAAAC,eAAA,EAAqBN,KAAK,CAACO;MAAK;MACrCC,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,eAAe,CAACX,KAAK,CAACO,KAAK;;oCAGvClB,mBAAA,CAEM;IAFDC,KAAK,EAAC,WAAW;IAAEc,KAAK,EAAAC,eAAA;MAAAC,eAAA,EAAqBR,KAAA,CAAAc;IAAc;KAAI,aAEpE,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}